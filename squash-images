#!/bin/bash

# Usage: ./compress_images.sh /path/to/directory
# This script finds all *.jpg, *.jpeg, or *.png files over 500K in the specified directory
# and rewrites them as a JPEG at 0.7 quality.
# If the original was a .jpg, it replaces it.
# If the original was a .jpeg or .png, it creates a .jpg and removes the old file.
# If the compressed file is still over 500K, scales it down by half in both dimensions.

DIR="$1"

# Make sure a directory was specified
if [ -z "$DIR" ]; then
  echo "Error: Please specify a directory."
  exit 1
fi

# Higher is better quality, but larger file size
QUALITY=70

# Size threshold (500K)
SIZE_THRESHOLD=500000

# Function to compress image and resize if needed
compress_image() {
  local input="$1"
  local output="$2"
  local tmpfile="$(mktemp /tmp/sips.XXXXXX).jpg"

  # First compress with quality setting
  sips --setProperty format jpeg --setProperty formatOptions $QUALITY "$input" -o "$tmpfile"

  # Check if compressed file is still over the threshold
  if [ $(stat -f%z "$tmpfile") -gt $SIZE_THRESHOLD ]; then
    # Get current dimensions
    local width=$(sips -g pixelWidth "$tmpfile" | awk '/pixelWidth/ {print $2}')
    local height=$(sips -g pixelHeight "$tmpfile" | awk '/pixelHeight/ {print $2}')

    # Calculate half dimensions
    local new_width=$((width / 2))
    local new_height=$((height / 2))

    # Scale down by 50%
    sips --resampleWidth $new_width --resampleHeight $new_height "$tmpfile" --out "$tmpfile"
  fi

  # Copy to final destination
  cp "$tmpfile" "$output"
  rm -f "$tmpfile"
}

# Find all jpg/jpeg/png files larger than 500K
find "$DIR" -type f \( -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.png' \) -size +500k | while read -r FILE; do
  EXT_LOWER=$(echo "${FILE##*.}" | tr '[:upper:]' '[:lower:]')
  BASE="${FILE%.*}"

  if [ "$EXT_LOWER" = "jpg" ]; then
    # Compress and replace the original jpg
    compress_image "$FILE" "$FILE"
  elif [ "$EXT_LOWER" = "jpeg" ] || [ "$EXT_LOWER" = "png" ]; then
    # Compress and convert to jpg, then remove the original
    OUTFILE="${BASE}.jpg"
    compress_image "$FILE" "$OUTFILE"
    rm -f "$FILE"
  fi
done
