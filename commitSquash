#!/bin/bash

# Usage: ./commitSquash "Your new commit message"
#
# Squashes all commits on the current branch that are ahead of its upstream
# counterpart (origin/BRANCH) into a single commit with the provided message,
# using the 'reset --soft' method.

# Exit immediately if a command exits with a non-zero status.
set -e

# --- Configuration ---
# GIT_EDITOR is not needed for this method
# ---

# --- Determine Commit Message ---
COMMIT_MSG=""
if [ -z "$1" ]; then
  COMMIT_MSG="Squashed changes."
  echo "No commit message provided. Using default: '$COMMIT_MSG'"
else
  COMMIT_MSG="$1"
fi
# ---

# --- Get Branch Info ---
BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$BRANCH" = "HEAD" ]; then
  echo "❌ Error: You are in a detached HEAD state. Cannot determine branch."
  exit 1
fi
REMOTE_BRANCH="origin/$BRANCH"
if ! git rev-parse --verify --quiet "$REMOTE_BRANCH" > /dev/null; then
  echo "❌ Error: Remote branch '$REMOTE_BRANCH' not found."
  exit 1
fi
# ---

# --- Calculate Commits Ahead ---
# Check using rev-list first to avoid unnecessary work if already synced
AHEAD_COUNT=$(git rev-list --count "$REMOTE_BRANCH"..HEAD)

if [ "$AHEAD_COUNT" -eq 0 ]; then
  echo "✅ Nothing to squash — branch '$BRANCH' is not ahead of '$REMOTE_BRANCH'."
  exit 0
fi
# ---

# --- Perform Squash using reset --soft ---
echo "⏳ Squashing $AHEAD_COUNT commits on branch '$BRANCH' ahead of '$REMOTE_BRANCH' using 'reset --soft'..."

# Reset the current branch pointer back to the remote branch's position,
# but keep all the accumulated changes from the commits ahead staged (--soft).
echo "Running: git reset --soft $REMOTE_BRANCH"
if ! git reset --soft "$REMOTE_BRANCH"; then
    echo "❌ Error: git reset --soft failed."
    exit 1
fi
echo "Reset complete. Staging contains combined changes."

# Commit the staged changes as a single new commit
# Use --allow-empty in case the net change was zero.
echo "Running: git commit --allow-empty -m \"$COMMIT_MSG\""
if ! git commit --allow-empty -m "$COMMIT_MSG"; then
    echo "❌ Error: git commit failed."
    exit 1
fi
# ---

# --- Confirmation ---
# Get the new commit hash for confirmation
NEW_HEAD=$(git rev-parse HEAD)
echo "✅ Squashed $AHEAD_COUNT commits into one new commit ($NEW_HEAD) on branch '$BRANCH' with message:"
echo "-> $COMMIT_MSG"
echo "⚠️ Remember to push with force-with-lease if you need to update the remote:"
echo "   git push --force-with-lease origin $BRANCH"
# ---

exit 0
